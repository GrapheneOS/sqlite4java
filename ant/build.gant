/*
 * Copyright 2010 ALM Works Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

final String baseDir = {
  String v = ant.project.baseDir.getCanonicalPath().replace('\\', '/');
  if (v.endsWith("/")) v = v.substring(0, v.length() - 1)
  v
}()
final rel = {String file -> "$baseDir/$file" }

final String antProp(String it) { ant.project.properties[it] as String }

ant.property(file: "global.properties")

final String mod = rel('..')
final String build = rel("../build")
final String buildClasses = "$build/classes"
final String javolution = rel('../lib/javolution.jar')
final String junit = rel('../lib/junit.jar')

String os = "unknown"
final buildtypes = ["debug", "release"]
final platforms = []

final libname = { String platform, String buildtype -> antProp('lib.prefix') + antProp('libname') + "-$platform" + ("debug".equals(buildtype) ? "-d" : "") + antProp('lib.suffix') }

target('debug': 'build only debug binaries') {
  buildtypes.remove("release")
}
target('release': 'build only release binaries') {
  buildtypes.remove("debug")
}

final checkProp = {
  if (!antProp(it)) { ant.fail(message: "no $it") } else {
    ant.echo(message: it + "=" + antProp(it))
  }
}

String version="0"

target(name: 'init') {
  ant.echo(message: "building " + new File(mod).getCanonicalPath())

  ant.presetdef(name: 'exec') {
    exec(failifexecutionfails: "true", failonerror: "true", dir: mod)
  }
  ant.presetdef(name: "copy") {
    copy(overwrite: "true", failonerror: "true")
  }

  ant.echo(message: "os.name=" + antProp('os.name'))
  ant.echo(message: "os.arch=" + antProp('os.arch'))
  ant.echo(message: "os.version=" + antProp('os.version'))
  String osname = antProp('os.name').toLowerCase(Locale.US)
  if (osname.contains("mac")) {
    os = "mac"
  } else if (osname.contains("win")) {
    os = "windows"
  } else {
    os = "linux"
  }

  def info = "svn info $mod".execute().text
  def m = info =~ /Revision: (\d+)/
  if (!m) { ant.echo(message: "WARNING: no version"); }
  else {
    version = m[0][1];
    def status = "svn status $mod".execute().text
    System.err.println("STATUS: " + status)
    if (status =~ /(?m)^[^\?]/) {
      ant.echo(message: "WARNING: dirty build")
      version += "+";
    }
  }
  ant.echo(message: "version=" + version)

  ant.echo(message: "os=${os}")
  ant.echo(message: "arch=${antProp('os.arch')}")
  List files = []
//  files << "${os}-${antProp('os.arch')}-${buildType}.properties"
//  files << "${os}-${antProp('os.arch')}.properties"
//  files << "${os}-${buildType}.properties"
  files << "${os}.properties"
//  files << "${buildType}.properties"
  files << "default.properties"
  files.each {
    if (new File(rel(it)).isFile()) {
      ant.echo(message: "++++++++++++++ loading: " + it)
      ant.property(file: rel(it))
    } else {
      ant.echo(message: "                        " + it)
    }
  }

  checkProp("jdk.home")
  checkProp("swig.home")
  if (os == "windows") checkProp("wsdk.home")

  Arrays.asList(antProp("platforms").split("\\s*,\\s*")).each { platforms << it.trim() }
  if (platforms.isEmpty()) ant.fail(message: "no platforms defined");

  ant.echo(message: "buildtypes=$buildtypes")
  ant.echo(message: "platforms=$platforms")
}

target(name: 'uptodate') {
  depends(['init'])
  buildtypes.each { String buildtype ->
    platforms.each { String platform ->
      ant.uptodate(property: "lib.uptodate.$buildtype.$platform", targetfile: build + "/lib.$buildtype.$platform/" + libname(platform, buildtype)) {
        srcfiles(dir: "$mod/swig")
        srcfiles(dir: "$build", includes: "**/*.c")
        srcfiles(dir: "$build/cc.$buildtype.$platform", includes: "*.o")
        srcfiles(dir: "$mod/native")
      }
      ant.uptodate(property: "sqlite.uptodate.$buildtype.$platform", targetfile: build + "/cc.$buildtype.$platform/sqlite3.o") {
        srcfiles(dir: "$mod/sqlite")
      }
    }
  }
  ant.uptodate(property: 'jar.uptodate', targetfile: build + "/jar/" + antProp('jarname')) {
    srcfiles(dir: "$mod/swig")
    srcfiles(dir: "$build/java")
    srcfiles(dir: "$build/classes")
    srcfiles(dir: "$mod/java")
  }
}

final wsdk = {String arg, String out, String arch, String buildtype ->
  ant.delete(file: out)
  ant.exec(dir: mod, command: "cmd /C echo $arg | cmd /V:ON /D /K \"${antProp('msenv')}\" /$arch /$buildtype ${antProp('msenv.extra')}")
  if (!new File(out).isFile()) {
    ant.fail(message: "cannot make $out")
  }
}

target(name: 'init.wincompile') {
  depends(['init'])
  ant.exec(dir: mod, command: "cmd /C echo set | cmd /V:ON /D /K \"${antProp('msenv')}\" /x86 /debug ${antProp('msenv.extra')}")
}

target(name: 'lib.compile') {
  depends(['init', 'uptodate', 'lib.swig'])
  buildtypes.each { String buildtype ->
    platforms.each { String platform ->
      ant.echo(message: "compiling .c for $platform / $buildtype")
      String out = "$build/cc.$buildtype.$platform"
      ant.mkdir(dir: out)
      if (os == "windows") {
        depends(['init.wincompile'])
        checkProp("arch.$platform")
        def arch = antProp("arch.$platform")
        if (!antProp("sqlite.uptodate.$buildtype.$platform")) {
          def clargs = antProp("${buildtype}.cl.args") + " " + antProp("${buildtype}.cl.sqlite");
          wsdk("${antProp('cl')} $clargs -Fo$out/sqlite3.o sqlite/sqlite3.c", "$out/sqlite3.o", arch, buildtype)
        }
        def clargs = antProp("${buildtype}.cl.args") + " " + antProp("cl.paranoid");
        wsdk("${antProp('cl')} $clargs -Fo$out/sqlite_wrap.o $build/swig/sqlite_wrap.c", "$out/sqlite_wrap.o", arch, buildtype)
        wsdk("${antProp('cl')} $clargs -Fo$out/sqlite3_wrap_manual.o native/sqlite3_wrap_manual.c", "$out/sqlite3_wrap_manual.o", arch, buildtype)
      } else {
        if (!antProp("sqlite.uptodate.$buildtype.$platform")) {
          def clargs = antProp("${buildtype}.cc.args") + " " + antProp("${buildtype}.cc.sqlite");
          ant.exec(dir: mod, command: "${antProp('cc')} $clargs -c sqlite/sqlite3.c -o $out/sqlite3.o")
        }
        def clargs = antProp("${buildtype}.cc.args") + " " + antProp("cc.paranoid");
        ant.exec(dir: mod, command: "${antProp('cc')} $clargs -c $build/swig/sqlite_wrap.c -o $out/sqlite_wrap.o")
        ant.exec(dir: mod, command: "${antProp('cc')} $clargs -c native/sqlite3_wrap_manual.c -o $out/sqlite3_wrap_manual.o")
      }
    }
  }
}

target(name: 'lib.swig') {
  depends(['init'])
  ant.mkdir(dir: "$build/swig")
  String outDir = "$build/java/${antProp('java.package.dir')}"
  ant.mkdir(dir: outDir)
  ant.exec(dir: mod, command: "${antProp('swig')} -java -package ${antProp('java.package')} -outdir $outDir -o $build/swig/sqlite_wrap.c swig/sqlite.i")
}

target(name: 'lib.link') {
  depends(['lib.compile'])
  buildtypes.each { String buildtype ->
    platforms.each { String platform ->
      ant.echo(message: "linking .o for $platform / $buildtype")
      String out = "$build/lib.$buildtype.$platform"
      ant.mkdir(dir: out)
      String cc = "$build/cc.$buildtype.$platform"
      if (os == "windows") {
        def arch = antProp("arch.$platform")
        wsdk("${antProp('link')} ${antProp('link.args')} /OUT:$out/${libname(platform, buildtype)} $cc/sqlite3.o $cc/sqlite_wrap.o $cc/sqlite3_wrap_manual.o",
          "$out/${libname(platform, buildtype)}", arch, buildtype)
      } else {
        def clargs = antProp("${buildtype}.cc.args");
        ant.exec(dir: mod, command: "${antProp('cc')} $clargs ${antProp('cc.link')} -o $out/${libname(platform, buildtype)} $cc/sqlite3.o $cc/sqlite_wrap.o $cc/sqlite3_wrap_manual.o")
      }
    }
  }
}

target(name: 'lib') {
  depends(['uptodate'])
  boolean changes = false
  buildtypes.each { String buildtype ->
    platforms.each { String platform ->
      if (!antProp('lib.uptodate')) { changes = true }
    }
  }
  if (!changes) return
  depends(['lib.compile', 'lib.link'])
}

target(name: 'java.compile') {
  depends(['uptodate'])
  if (antProp('jar.uptodate')) return
  depends(['lib.swig'])
  ant.copy(todir: "$build/java") {
    fileset(dir: "$mod/java")
  }
  ant.mkdir(dir: buildClasses)
  ant.javac(srcdir: "$build/java", destdir: buildClasses, debug: "on", classpath: javolution)
}

target(name: 'java.jar') {
  depends(['uptodate'])
  if (antProp('jar.uptodate')) return
  depends(['java.compile'])
  ant.mkdir(dir: "$build/jar")
  ant.jar(destfile: "$build/jar/${antProp('jarname')}", basedir: "$buildClasses") {
    manifest {
      attribute(name:"Main-Class", value:"com.almworks.sqlite4java.SQLite")
      attribute(name:"Specification-Title", value:"sqlite4java")
      attribute(name:"Specification-Version", value:"${version}")
      attribute(name:"Specification-Vendor", value:"ALM Works")
      attribute(name:"Implementation-Title", value:"sqlite4java")
      attribute(name:"Implementation-URL", value:"http://code.google.com/p/sqlite4java")
      attribute(name:"Implementation-Vendor", value:"ALM Works")
      attribute(name:"Implementation-Version", value:"${version}")
    }
  }
}

target('dist': 'create distributable artifacts') {
  depends(['lib', 'java.jar'])
  ant.mkdir(dir: "$build/dist")
  ant.copy(todir: "$build/dist", file: "$build/jar/${antProp('jarname')}")
  buildtypes.each { String buildtype ->
    platforms.each { String platform ->
      def libn = libname(platform, buildtype);
      ant.copy(tofile: "$build/dist/$libn", file: "$build/lib.$buildtype.$platform/$libn")
    }
  }
}

target('test': 'run all tests') {
  depends(['dist'])
  ant.mkdir(dir: "$build/testClasses")
  ant.javac(srcdir: "$mod/test", destdir: "$build/testClasses", debug: "on") {
    classpath {
      pathelement(location: "$build/dist/${antProp('jarname')}")
      pathelement(location: javolution)
      pathelement(location: junit)
    }
  }
  platforms.each { String platform ->
    buildtypes.each { String buildtype ->
      def jvm = antProp("jre.$platform")
      if (jvm) jvm = "$jvm/bin/java";
      ant.delete(dir: "$build/testRun")
      ant.mkdir(dir: "$build/testRun")
      def resultsDir = "$build/testResults.$buildtype.$platform"
      ant.mkdir(dir: resultsDir)
      ant.copy(file: "$build/dist/${antProp('jarname')}", todir: "$build/testRun")
      ant.copy(file: "$build/dist/${libname(platform, buildtype)}", todir: "$build/testRun")
      ant.junit(jvm: jvm, fork: "yes", printsummary: "true", haltonfailure: "true", showoutput: "true") {
        formatter(type: "plain")
        //<!--<jvmarg value="-verbose:jni"/>-->
        jvmarg(value: "-Djava.awt.headless=true")
        jvmarg(value: "-ea")
        jvmarg(value: "-Djava.library.path=${build}/testRun")
        classpath {
          pathelement(location: "$build/testClasses")
          pathelement(location: "$build/testRun/${antProp('jarname')}")
          pathelement(location: javolution)
          pathelement(location: junit)
        }
        batchtest(todir: resultsDir) {
          fileset(dir: "$mod/test", includes: "**/*Tests.java")
        }
        formatter(type: "xml")
      }
    }
  }
}

target('srczip': 'pack java sources for distribution') {
  depends(['lib.swig', 'java.compile'])
  ant.delete(file: "$build/dist/${antProp('srczipname')}")
  ant.zip(destfile: "$build/dist/${antProp('srczipname')}", basedir: "$build/java")
}

target('javadoc': 'create documentation zip') {
  depends(['lib.swig', 'java.compile'])
  if (antProp('lame.env')) {
    ant.echo(message: "skipping javadoc, lame env")
    return
  }
  ant.mkdir(dir: "$build/javadoc")
  ant.javadoc(sourcepath: "$build/java", destdir: "$build/javadoc")
  ant.zip(destfile: "$build/dist/sqlite4java-${version}-docs.zip", basedir: "$build/javadoc")
}

target('finalzip': 'build deliverable zip'){
  depends(['dist'])
  mkdir(dir:"$build/sqlite4java-${version}-$os")
  copy(todir:"$build/sqlite4java-${version}-$os") {
    fileset(dir:"$build/dist") {
//      include(name:antProp("jarname"))
//      include(name:"*.zip")
//      include(name:"*.so")
//      include(name:"*.dll")
//      include(name:"*.jnilib")
    }
  }
  zip(destfile:"$build/dist/sqlite4java-${version}-$os.zip",basedir:"$build", includes="sqlite4java-${version}-$os");
}

target(name: 'clean') {
  depends(['init'])
  ant.delete(dir: build)
}

target('all': 'build all artifacts') {
  depends(['dist', 'test', 'srczip', 'javadoc', 'finalzip'])
}

target(name: 'integrate') {
  depends(['clean', 'all'])
}
