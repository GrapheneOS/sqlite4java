<project basedir=".." name="sqlite4java" default="test">
  <property file="ant/global.properties"/>

  <presetdef name="exec">
    <exec failifexecutionfails="true" failonerror="true"/>
  </presetdef>
  <presetdef name="copy">
    <copy overwrite="true" failonerror="true"/>
  </presetdef>

  <target name="os">
    <echo message="os.name=${os.name}"/>
    <echo message="os.arch=${os.arch}"/>
    <echo message="os.version=${os.version}"/>
    <condition property="os" value="linux">
      <os family="unix" name="Linux"/>
    </condition>
    <condition property="os" value="mac">
      <os family="mac"/>
    </condition>
    <condition property="os" value="windows">
      <os family="windows"/>
    </condition>
    <condition property="os.undefined">
      <not>
        <isset property="os"/>
      </not>
    </condition>
  </target>

  <target name="os.check" depends="os" if="os.undefined">
    <fail message="Unrecognized operating system"/>
  </target>

  <target name="release" depends="clean">
    <fail if="buildtype" message="buildtype is already set to ${buildtype}"/>
    <property name="production" value="true"/>
    <property name="buildtype" value="release"/>
    <property name="cc.buildtype" value="-DNDEBUG"/>
    <property name="ms.buildtype" value="RELEASE"/>
  </target>

  <target name="debug">
    <property name="debug" value="true"/>
    <property name="buildtype" value="debug"/>
    <property name="cc.buildtype" value="-DSQLITE_DEBUG=1 ${cc.debug}"/>
    <property name="ms.buildtype" value="DEBUG"/>
  </target>

  <target name="buildtype.check" depends="debug"/>

  <target name="props" depends="os.check, buildtype.check">
    <echo message="os=${os}"/>
    <echo message="arch=${os.arch}"/>
    <echo message="buildtype=${buildtype}"/>
    <macrodef name="loadprop">
      <attribute name="file"/>
      <sequential>
        <available file="@{file}" property="available.@{file}" value="++ loading: "/>
        <property name="available.@{file}" value="            "/>
        <echo message="${available.@{file}} @{file}"/>
        <property file="@{file}"/>
      </sequential>
    </macrodef>
    <loadprop file="ant/${os}-${os.arch}-${buildtype}.properties"/>
    <loadprop file="ant/${os}-${os.arch}.properties"/>
    <loadprop file="ant/${os}-${buildtype}.properties"/>
    <loadprop file="ant/${os}.properties"/>
    <loadprop file="ant/${buildtype}.properties"/>
    <loadprop file="ant/default.properties"/>
  </target>

  <target name="check.jdk">
    <fail message="no jdk.home" unless="jdk.home"/>
    <echo message="jdk.home=${jdk.home}"/>
  </target>

  <target name="clean">
    <delete dir="build"/>
    <!--<delete dir="dist"/>-->
  </target>




  <target name="uptodate">
    <uptodate property="lib.uptodate" targetfile="build/${lib}">
      <srcfiles dir="swig"/>
      <srcfiles dir="build" includes="**/*.c"/>
      <srcfiles dir="build" includes="**/*.o"/>
      <srcfiles dir="native"/>
    </uptodate>
    <uptodate property="sqlite.uptodate" targetfile="build/sqlite3.o">
      <srcfiles dir="sqlite"/>
    </uptodate>
    <uptodate property="jar.uptodate" targetfile="build/${libname}.jar">
      <srcfiles dir="swig"/>
      <srcfiles dir="build/java"/>
      <srcfiles dir="build/classes"/>
      <srcfiles dir="java"/>
    </uptodate>
    <condition property="all.uptodate">
      <and>
        <isset property="lib.uptodate"/>
        <isset property="jar.uptodate"/>
      </and>
    </condition>
  </target>

  <target name="init" depends="props, uptodate">
    <echo message="buildtype=${buildtype}"/>
    <mkdir dir="build"/>
    <mkdir dir="build/java/${java.package.dir}"/>
    <mkdir dir="build/native"/>
    <mkdir dir="build/classes"/>
    <mkdir dir="build/test"/>
  </target>

  <target name="lib.swig" depends="init" unless="all.uptodate">
    <fail message="no swig.home" unless="swig.home"/>
    <exec command="${swig} -java -package ${java.package}
      -outdir build/java/${java.package.dir} -o build/native/sqlite_wrap.c swig/sqlite.i"/>
  </target>

  <target name="init.windows">
    <fail message="no wsdk.home" unless="wsdk.home"/>
    <echo message="wsdk.home=${wsdk.home}"/>
    <macrodef name="wsdk">
      <attribute name="arg"/>
      <sequential>
        <exec command="cmd /C echo @{arg} | cmd /V:ON /D /K ${msenv} /${os.arch} /${ms.buildtype}" errorproperty="execerr"/>
        <fail if="execerr" message="${execerr}"/>
      </sequential>
    </macrodef>
  </target>

  <macrodef name="compile">
    <attribute name="c"/>
    <attribute name="o"/>
    <attribute name="a" default=""/>
    <sequential>
      <vc arg="/O1 /c /Zi /I${jdk.home}/include /I${jdk.home}/include/win32 /Isqlite /Inative @{a} /Fo@{o} @{c}"/>
    </sequential>
  </macrodef>

  <target name="lib.compile.unix" if="ostype.unix" unless="sqlite.uptodate">
    <exec command="${cc} ${cc.args} ${sqlite.cc.args} ${cc.buildtype} ${cc.include} -c sqlite/sqlite3.c -o build/sqlite3.o"/>
  </target>

  <target name="lib.compile.windows" if="ostype.windows" unless="sqlite.uptodate">
    <antcall target="init.windows"/>
    <wsdk arg="cl.exe ${cl.args} "/>
  </target>

  <target name="lib.compile" depends="init, lib.compile.unix, lib.compile.windows">

    <!--<vc arg="/O1 /c /Zi /Fobuild/sqlite3.o sqlite/sqlite3.c"/>-->
    <compile c="sqlite/sqlite3.c" o="build/sqlite3.o" a="/DSQLITE_ENABLE_COLUMN_METADATA /DHAVE_READLINE=0 /DSQLITE_THREADSAFE=1 /DSQLITE_THREAD_OVERRIDE_LOCK=-1 /DTEMP_STORE=1 /DSQLITE_OMIT_LOAD_EXTENSION=1"/>
    <!--linux-->

  </target>

  <target name="lib.wrap.compile" depends="lib.swig" unless="lib.uptodate">
    <compile c="build/native/sqlite_wrap.c" o="build/sqlite_wrap.o"/>
    <compile c="native/sqlite3_wrap_manual.c" o="build/sqlite3_wrap_manual.o"/>
    <!--<exec command="${cc} ${cc.args} ${cc.paranoid} ${cc.include} -c build/native/sqlite_wrap.c -o build/sqlite_wrap.o"/>-->
    <!--<exec command="${cc} ${cc.args} ${cc.paranoid} ${cc.include} -c native/sqlite3_wrap_manual.c -o build/sqlite3_wrap_manual.o"/>-->
  </target>

  <target name="lib.link" depends="lib.compile, lib.wrap.compile" unless="lib.uptodate">
    <!--<exec command="${cc} ${cc.args} ${cc.link} -o build/${lib}-->
    <!--build/sqlite3.o build/sqlite_wrap.o build/sqlite3_wrap_manual.o"/>-->
    <exec command="cmd /C echo link.exe /nologo /DLL /opt:REF /incremental:no /OUT:build/${lib} build/sqlite3.o build/sqlite_wrap.o build/sqlite3_wrap_manual.o | cmd /D /K ${msenv} /x86 /DEBUG"/>

  </target>

  <target name="java.compile" depends="lib.swig" unless="jar.uptodate">
    <copy todir="build/java" flatten="false">
      <fileset dir="java"/>
    </copy>
    <javac srcdir="build/java" destdir="build/classes" debug="on"/>
  </target>

  <target name="java.jar" depends="java.compile" unless="jar.uptodate">
    <jar destfile="build/${libname}.jar" basedir="build/classes"/>
  </target>

  <target name="dist" depends="lib.link, java.jar">
    <property name="dist.suffix" value="${os}-${os.arch}"/>
    <mkdir dir="dist/${buildtype}"/>
    <copy todir="dist" file="build/${libname}.jar"/>
    <copy todir="dist/${buildtype}">
      <fileset dir="build" includes="${lib}"/>
      <mapper type="regexp" from="^(.*)${libname}(.*)$$" to="\1${libname}-${dist.suffix}\2"/>
    </copy>
  </target>

  <target name="test" depends="dist">
    <javac srcdir="test" destdir="build/test" debug="on">
      <classpath>
        <pathelement location="build/sqlite.jar"/>
        <pathelement location="lib/junit.jar"/>
      </classpath>
    </javac>
    <mkdir dir="build/testrun"/>
    <junit fork="yes" printsummary="true" haltonfailure="true" showoutput="true">
      <formatter type="plain"/>
      <!--<jvmarg value="-verbose:jni"/>-->
      <jvmarg value="-Djava.awt.headless=true"/>
      <jvmarg value="-ea"/>
      <classpath>
        <pathelement location="build/test"/>
        <pathelement location="dist/sqlite.jar"/>
        <pathelement location="lib/junit.jar"/>
      </classpath>
      <sysproperty key="java.library.path" value="dist/${buildtype}"/>
      <batchtest todir="build/testrun">
        <fileset dir="test" includes="**/*Tests.java"/>
      </batchtest>
    </junit>
  </target>

  <target name="test2" depends="dist">
    <javac srcdir="test" destdir="build/test" classpath="build/sqlite.jar" debug="on"/>
    <java classname="Test" fork="yes">
      <!--<jvmarg value="-verbose:jni"/>-->
      <classpath>
        <pathelement location="build/test"/>
        <pathelement location="dist/sqlite.jar"/>
      </classpath>
      <sysproperty key="java.library.path" value="dist/${buildtype}"/>
    </java>
  </target>

  <!--
  Linux with gcc:

  x86:
    -Di586 -DARCH='"i586"' -DLINUX -D_LARGEFILE64_SOURCE -D_GNU_SOURCE -D_LITTLE_ENDIAN

  amd64:
    -DAMD64 -DARCH='"AMD64"' -D_LP64=1

  -fno-omit-frame-pointer
  -fno-strict-aliasing
  -O2
  -W -Wall -Wno-unused -Wno-parentheses -Werror
  -Wl,-soname=LibraryName
  -Xlinker -version-script=mapfile
  -static-libgcc -mimpure-text

  Windows:
  /Op
  /O1
  /W3 /WX
  /opt:REF /incremental:no
  /MD
    /Fmsqlite.map /Foobjfile /Feexefile /Iincludes /Dmacro

    debug = /Zi
    /c compile
    /nologo

  link /LD
      /link ... options
   /MD

  /LDd
        /MDd

  -->


</project>